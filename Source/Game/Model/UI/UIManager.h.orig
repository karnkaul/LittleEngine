#pragma once
#include "Core/CoreTypes.h"
#include "SFMLAPI/Rendering/LayerID.h"
#include "UIContext.h"

namespace LittleEngine
{
class UIManager final
{
public:
private:
	List<UPtr<class UIContext>> m_contexts;
	std::unordered_map<std::string, UPtr<UIContext>> m_inactive;

public:
	UIManager();
	~UIManager();

	template <typename T>
	T* PushContext(std::string id);
	UIContext* GetActiveContext() const;

private:
	template <typename T>
	UPtr<T> GetInactive(const std::string& id);
	template <typename T>
	UPtr<T> CreateContext(std::string id);

	void Reset();
	void Tick(Time dt);

	void InitContext(UIContext& context, std::string id, LayerID baseLayer);
	void DisableContext(UIContext& context);

private:
	friend class GameManager;
};

template <typename T>
T* UIManager::PushContext(std::string id)
{
	static_assert(IsDerived<UIContext, T>(), "T must derive from UIContext!");

	if (!m_contexts.empty())
	{
		auto& uHead = m_contexts.back();
		uHead->SetActive(false);
	}
	UPtr<T> uT = GetInactive<T>(id);
	if (!uT)
	{
		uT = CreateContext<T>(std::move(id));
	}
	uT->SetActive(true);
	T* pT = dynamic_cast<T*>(uT.get());
	m_contexts.emplace_back(std::move(uT));
	LOG_D("%s pushed on to UIStack", pT->LogNameStr());
	return pT;
}

template <typename T>
UPtr<T> UIManager::GetInactive(const std::string& id)
{
	auto search = m_inactive.find(id);
	if (search != m_inactive.end())
	{
		auto uContext = std::move(search->second);
		Assert(dynamic_cast<T*>(uContext.get()), "Type-ID mismatch!");
		m_inactive.erase(search);
		LayerID baseLayer = m_contexts.empty() ? LAYER_UI : static_cast<LayerID>(m_contexts.back()->GetMaxLayer() + 2);
		uContext->Regenerate(baseLayer);
		return UPtr<T>(dynamic_cast<T*>(uContext.release()));
	}
	return {};
}

template <typename T>
UPtr<T> UIManager::CreateContext(std::string id)
{
	UPtr<T> uT = std::make_unique<T>();
	LayerID baseLayer = m_contexts.empty() ? LAYER_UI : static_cast<LayerID>(m_contexts.back()->GetMaxLayer() + 2);
<<<<<<< HEAD
	InitContext(uT.get(), std::move(id), baseLayer);
	return std::move(uT);
=======
	InitContext(*uT, std::move(id), baseLayer);
	return (uT);
>>>>>>> 10f4864... ENGINE: Manifest-per-world
}

} // namespace LittleEngine
