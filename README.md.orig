# Little Engine

Written in **C++17**, utilising [**SFML v2.5.1**](https://www.sfml-dev.org/) and [**PhysicsFS 3.0.1**](https://icculus.org/physfs/), Little Engine is a 2D game engine hobby project with little defined ambition or scope; in other words, let's see where we can take this!

## Using LittleEngine
### Requirements

#### To Run the latest Release
1. x64 CPU (ARM64 binaries are not built for standard releases) with at least two threads
1. Operating System:
    1. Windows 7/8/10
        1. [Microsoft VC++ Runtime (x64)](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)
    1. Linux: the following installed to standard paths
        1. X11, XRandr, OpenAL libraries and development headers
    1. MacOSX
        1. Python is recommended, as the installer creates the app bundle
1. Python 3.5+ (optional: for `installer.py`)

Obtain the game zip (present inside a GitHub Release zip), copy it to the installation directory, unzip it and run  installer.py via Python 3. (Or unzip ".game" manually and copy the contents of "[Your OS]" into its parent directory.)

> *Note: OSX builds are in alpha and may not be stable.*

#### To Build Source
1. x64 / ARM64 multi-threaded target
1. [CMake](https://cmake.org/download/) for the target, preferably using [Ninja](https://ninja-build.org/) and [LLVM](https://llvm.org/)
1. [Git](https://git-scm.com/downloads)
1. [SFML 2.5.1](https://www.sfml-dev.org/download/sfml/2.5.1/) source / pre-built libraries for the target
1. All files in SFML "ext-libs" for the target
1. (Linux) If building SFML, all its dependencies (OpenGL, UDev, Freetype, Vorbis, Flac, etc)
1. (Win 10) [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk) (and CRT)
1. (MacOSX) Xcode
1. (Optional) [Python 3](https://www.python.org/downloads/) (all tools scripts are in Python)
1. (Optional) Ninja, Clang, and lld are recommended, as `LittleEngine` is developed and built on such a toolset

>*Note: Due to GitHub's limitations with (free) LFS, Runtime Assets have been moved to DropBox since 0.4.4.0.*

>*Note: Scripts in "Runtime/Utils" are only designed to work when run from "./Runtime" or "./Runtime/Utils".*

### Setting up the project
Quick Start:
1. Extract [Runtime Assets](https://www.dropbox.com/sh/ygwprt87nr4sigm/AABKD-84WKMNXtyM4LNcnH3ca?dl=0) into "./Runtime"
1. Run CMake on "./Source/ThirdParty/CMakeLists.txt"
1. Build Debug and Release
1. Copy dependencies to "./ThirdParty/..."
1. Run CMake on "./Source/CMakeLists.txt"
1. Build/install generated project

[Short video](https://youtu.be/J_EQ73xlAfs) demonstrating full project setup from scratch on Linux (v0.4.3.2).

1. Download the latest [Runtime Assets](https://www.dropbox.com/sh/ygwprt87nr4sigm/AABKD-84WKMNXtyM4LNcnH3ca?dl=0) and extract "GameAssets" and "GameMusic" into "./Runtime". (Asset manifests are version controlled and can differ per branch; they are not included in Runtime Assets.)
1. Create one or more out-of-source directories, [IDE_Directory], for CMake builds, IDE project files, etc. ("./Project*" is excluded via `.gitignore`, its variants can be used as CMake build directories alongside "./Source" and "./Runtime".) If building SFML, download the source for 2.5.1 and place the directory with the root `CMakeLists.txt` in "./Source/ThirdParty", renaming it to "SFML". If using Visual Studio CMake (with Ninja), create/edit `CMakeSettings.json` to ensure all the build directories are out of source.
1. Set up Third Party libraries:
    1. Run CMake on "./Source/ThirdParty" and generate `Debug` & `Release` or an IDE project(s) (out of source). If "SFML" directory exists, it will be included in the solution/workspace/build pipeline.
    1. Build `ThirdParty` in `Debug` and `Release` configurations.
    1. Copy all the built libraries (.a/.lib/.so/.dylib) into "./ThirdParty/Libraries".
    1. Copy all the libraries in "[SFML Source]/ext-libs" for the target into "./ThirdParty/Libraries".
    1. (OSX): Copy all the frameworks in "[SFML Source]/ext-libs/libs-osx/Frameworks" to "./ThirdParty/Frameworks".
1. Set up Little Engine:
    1. If not using a supported platform, write the corresponding CMake script for it by copying "./Source/_CMake/Platform.cmake" into "./Source/_CMake/Platforms/[name].cmake" and set your compiler, linker, and IDE options via "overridden" functions. Include the script in "Platform.cmake".
    1. Configure CMake on "Source" and "[IDE_Directory]".
    1. Generate one or more IDE/ninja projects (preferably using the LLVM toolset / Clang + lld). If using Visual Studio CMake, re-generate the cache (for all created build configurations).
    1. Debugging:
        1. If using an IDE, set `LEApp` as the startup project / debugging target. 
        1. Use / set "Runtime" as the working directory. (If using Visual Studio CMake, set this in "launch.vs.json".)
    1. Installing:
        1. If using an IDE, build the "install" target; if using CMake 3.15+, call `cmake --install [IDE_Directory]`; else call `[build_system] install -C [IDE_Directory]`; this will update `RPATH`s for executables and copy them + dependencies into "./Runtime". If using dynamic/shared libraries, these executables will be portable.

>*Note: While it is feasible to build and run `LittleEngine` on a Raspberry Pi 4, it is not recommended as the performance is atrocious.*

## About the project
### Source Tree
```
LittleEngine/
    Source/                   # All source code
        CMake/
        ThirdParty/           # Third Party code
            Include/          # All library headers
            physfs/
            [SFML/]           # Ignored in source tree, built if present
            CMakeLists.txt    # Top level for ThirdParty
        Core
        Engine
        Game
        App
        CMakeLists.txt        # Top level for LittleEngine
    Runtime/                  # Debugging working directory
        GameAssets/           # Assets root directory (subdirectories ignored)
            Manifest.amf      # Cook manifest
        GameMusic/            # Music root directory (not cooked)
        [GameAssets.cooked]   # Cooked assets (ignored)
    [Project*/]               # IDE directories (ignored)
    [ThirdParty/]             # Build libraries/frameworks root
```
### Introduction
<<<<<<< HEAD
**LittleEngine** uses two core threads: the main thread integrates at a fixed time slice, and a render thread attempts to run at the display refresh rate (via VSYNC) and interpolates between render states to draw entities on screen, though async rendering can be disabled via `GameConfig`. Depending on CPU availability, there will be a file logging thread as well, and a number of job workers for gameplay code to delegate tasks without blocking the main thread. As an example of long-running tasks, the asset manifest is loaded entirely via the job system's `JobCatalog` (collection of tasks with an optional main-thread callback); whereas `Quads` and `PSEmitter` objects exploit the `Jobs::ForEach()` API to distribute the updation of thousands of primitives among all the available workers within the time of a single frame.
=======
**LittleEngine** uses two core threads: the main thread integrates at a fixed time slice, and a render thread attempts to run as fast as possible (capped at the display refresh rate via VSYNC and frame-limited to twice that) and interpolates between render states to draw entities on screen, though async rendering can be disabled via `GameConfig`. Depending on CPU availability, there will be a file logging thread as well, and a number of job workers for gameplay code to delegate tasks without blocking the main thread. As an example of long-running tasks, asset manifests are loaded entirely via the job system's `JobCatalog` (collection of tasks with an optional main-thread callback); whereas `Quads` and `PSEmitter` objects exploit the `Jobs::ForEach()` API to distribute the updation of thousands of primitives among all the available workers within the time of a single frame.
>>>>>>> 10f4864... ENGINE: Manifest-per-world

>*Note: There must be at least one worker for the engine to start (without async rendering); thus the Engine cannot be run on single-threaded machines.*

The Engine offers multiple build configurations for debugging / authoring content / public redistribution. It uses an `Entity/Component` architecture for organising gameplay objects, where either can be subclassed. All Entities and Components are spawned and owned at game-time by an active `World`, which can be changed at any time, and any number of `Worlds` can be added to the Engine before running it. Assets are expected to be cooked into a zip archive and will be loaded in-memory at game-time, though non `SHIPPING` builds can directly load assets from the filesystem as well.

### Build Configurations

Config | MSVCRT | DEBUGGING | SHIPPING | Optimisation | Disk Assets
-------|-----|-----------|----------|--------------|--------------------
**Debug**       | CRTd   | True  | False     | Od/O0 |   True
**Development** | CRT    | True  | False     | Od/O0 |   True
**Release**     | CRT    | True  | True      | O2    |   False
**Ship**        | CRT    | False | True      | O2    |   False

>*(Win64) Note: ThirdParty libraries will be built as Debug/Release according to the CRT being linked with, and the compiler configuration for it must be identical across all projects in LittleEngine (`/MDd` vs `/MD`).*

### Asset Management
Before activating `World 0`, the Engine first loads assets into memory.

When not `SHIPPING`, the Engine can load assets into memory at any time, and directly through the filesystem. It is recommended to set a root directory such as GameAssets and store all assets hierarchically there. In `SHIPPING` builds, the Engine will only load assets through a compressed archive named `GameAssets.cooked`, which should be a zip archive of the root assets directory.
>*Expect warning logs for loading assets not present in `GameAssets.cooked` (only possible if `!SHIPPING`).*

The Engine needs an `AssetManifest` serialised `GData` object in order to locate relevant bytes within the cooked archive, and expects this to be in the root directory of the archive, named `Manifest.amf`. These assets will be loaded before anything else, and will remain in memory throughout the session. Each `World` also checks for the presence of an asset manifest of its namesake, and if found, loads/unloads those assets before/after activation/deactivation. `asset_cooker.py` is a tool that can be used to automate populating and generating `GameAssets.cooked` via all the assets listed in all the manifests. The expected workflow is to ensure all assets referenced by the game are in the global/world manifests (critical), and then to simply run the tool, which will backup the cooked archive if it already exists before creating a new one.
>*Expect warning logs and potential hitches on calling `Load<T>` for assets not in `LERepository`'s memory (ie, not in global /  current `World`'s manifests).*

### Adding custom code
1. Add gameplay code files to "Gameplay/", including at least one `World` derived class ("world 0").
1. Add new world class definition headers to "Gameplay/Worlds.h".
1. Add at least one world via `CreateWorld<T>` / `CreateWorlds<T>` in `GameInit::CreateWorlds()`.
1. Add any shaders to load via `LEShaders::LoadShader<T>` in `GameInit::LoadShaders()`.

>*Note: Make sure the working directory for the application project (`LEApp`) is set to "Runtime", when debugging/running from the IDE.*

An active `World` will always have an instance of `GameManager` available through `g_pGameManager`, which is capable of spawning new `Entity`s and its subclasses, as well as new `AComponent` subclasses, attached to existing `Entity`s. All the base gameplay classes have a `Super` typedef. The Engine will call `World::Tick(Time dt)` at a fixed time slice, set in `GameConfig`. `World` will then call `Entity::Tick()` and `Component::Tick()` on all active objects. Derived `World`s can execute code on either side of their call to `World::Tick()` / `Super::Tick()` in case of overrides.

`GameManager` owns an instance of `UIManager`, which manages a stack of `UIContext` objects. Each `UIContext` can contain numerous `UIElements` (base UI object) `UIWidgets` (navigatable and interactable `UIElements`). `GameManager` also provides pointers to `Input`, `UI`, `Renderer`, `Context`,`WorldCamera`, and `Physics` services.

At the end of each gameplay frame, `FinishFrame()` will cause the game state of all primitives to be copied into their corresponding render states for the renderer to interpolate between until the next swap.

There are several existing Entities, Components, UI Widgets and UI Contexts ready for use in `Framework`.

### Sub-project Arrangement

**Project**         | **Description**
--------------------|----------------
**ThirdParty**      | All dependencies that are compiled from source, like PhysicsFS (and SFML).
**Core**            | Core structures and utilities used by all projects.
**Engine**          | All Engine code: Context, Audio, Input, Physics, Renderer, Repository, etc.
**Game**            | All game-specific code, including Model, Framework, and Gameplay.
**App**             | OS-specific application resources `main()`.

## Misc

#### Backlog / Changelog

- [x] Custom 2D coordinate system
- [x] Primitive Render States
- [x] Dynamic game Entities
- [x] Dynamic game Components
- [x] Collision Detection
- [x] Sounds & Music
- [x] Engine Repository (for asset management)
- [x] In-game Console (when `DEBUGGING`)
- [x] Player-modifiable game-settings file
- [x] Debug-only engine-settings file
- [x] In-memory Asset Loads (through a cooked/compressed archive)
- [x] UI Framework
- [x] Gameplay UI classes
- [x] Gameplay Camera (root `Transform` for all `Entity`s)
- [x] Runtime configurable/recreatable Render Window
- [x] Options Menu
- [x] Vertex-Array particle systems
- [x] Asset Cooker tool
- [x] Application Packager tool
- [x] Containerised UI layout via files
- [x] Matrix transformations
- [x] Joystick and mouse support
- [x] CMake IDE project generation
- [x] Visual Studio CMake / Ninja integration
- [ ] Animation system
- [ ] Collision Resolution

